/* Copyright(C) 2017-2024, HJD (https://github.com/hjdhjd). All rights reserved.
 *
 * server.js: homebridge-unifi-access webUI server API.
 *
 * This module is heavily inspired by the homebridge-config-ui-x source code and borrows from both.
 * Thank you oznu for your contributions to the HomeKit world.
 */
"use strict";

import { featureOptionCategories, featureOptions, isOptionEnabled } from "../dist/access-options.js";
import { AccessApi } from "unifi-access";
import { HomebridgePluginUiServer } from "@homebridge/plugin-ui-utils";
import util from "node:util";

class PluginUiServer extends HomebridgePluginUiServer {

  errorInfo;

  constructor () {
    super();

    this.errorInfo = "";

    // Register getErrorMessage() with the Homebridge server API.
    this.#registerGetErrorMessage();

    // Register getDevices() with the Homebridge server API.
    this.#registerGetDevices();

    // Register getOptions() with the Homebridge server API.
    this.#registerGetOptions();

    this.ready();
  }

  // Register the getErrorMessage() webUI server API endpoint.
  #registerGetErrorMessage() {

    // Return the most recent error message generated by the Access API.
    this.onRequest("/getErrorMessage", async () => {

      try {

        return this.errorInfo;
      } catch(err) {

        console.log(err);

        // Return nothing if we error out for some reason.
        return "";
      }
    });
  }

  // Register the getDevices() webUI server API endpoint.
  #registerGetDevices() {

    // Return the list of Access devices.
    this.onRequest("/getDevices", async (controller) => {

      try {

        const log = {

          debug: (message, parameters) => {},
          error: (message, parameters = []) => {

            // Save the error to inform the user in the webUI.
            if(!!parameters?.[Symbol.iterator]) {

              this.errorInfo = util.format(message, ...parameters);
            } else {

              this.errorInfo = util.format(message, parameters);
            }

            console.error(this.errorInfo);
          },
          info: (message, parameters) => {},
          warn: (message, parameters = []) => {}
        };

        // Connect to the Access controller.
        const udaApi = new AccessApi(log);

        if(!(await udaApi.login(controller.address, controller.username, controller.password))) {

          return [];
        }

        // Bootstrap the controller. It will emit a message once it's received the bootstrap JSON, or you can alternatively wait for the Promise to resolve.
        if(!(await udaApi.getBootstrap())) {

          return [];
        }

        const devices = udaApi.devices.filter(x => x.is_managed);

        devices.sort((a, b) => {

          const aCase = (a.name ?? a.model).toLowerCase();
          const bCase = (b.name ?? b.model).toLowerCase();

          return aCase > bCase ? 1 : (bCase > aCase ? -1 : 0);
        });

        return [ udaApi.controller, ...devices ];
      } catch(err) {

        console.log(err);

        // Return nothing if we error out for some reason.
        return [];
      }
    });
  }

  // Register the getOptions() webUI server API endpoint.
  #registerGetOptions() {

    // Return the list of options configured for a given Access device.
    this.onRequest("/getOptions", async(request) => {

      try {

        const optionSet = {};

        // Loop through all the feature option categories.
        for(const category of featureOptionCategories) {

          optionSet[category.name] = [];

          for(const options of featureOptions[category.name]) {

            options.value = isOptionEnabled(request.configOptions, request.controllerUda, request.deviceUda, category.name + "." + options.name, options.default);
            optionSet[category.name].push(options);
          }
        }

        return { categories: featureOptionCategories, options: optionSet };

      } catch(err) {

        console.log(err);

        // Return nothing if we error out for some reason.
        return {};
      }
    });
  }
}

(() => new PluginUiServer())();
